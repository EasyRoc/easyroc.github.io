<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>Spring基础概念</title>
    <link href="/2023/03/19/%E6%B5%8B%E8%AF%95%E6%96%87%E7%AB%A0/"/>
    <url>/2023/03/19/%E6%B5%8B%E8%AF%95%E6%96%87%E7%AB%A0/</url>
    
    <content type="html"><![CDATA[<h2 id="IOC与DI，AOP"><a href="#IOC与DI，AOP" class="headerlink" title="IOC与DI，AOP"></a>IOC与DI，AOP</h2><h3 id="ioc思想"><a href="#ioc思想" class="headerlink" title="ioc思想"></a>ioc思想</h3><p>Inversion of Control，翻译为“控制反转”或“反转控制”，强调的是原来在程序中创建Bean的权利反转给第三方。<br>工厂设计模式，BeanFactory来充当第三方的角色，来产生Bean实例</p><h3 id="DI依赖注入思想"><a href="#DI依赖注入思想" class="headerlink" title="DI依赖注入思想"></a>DI依赖注入思想</h3><p>Dependency Injection，依赖注入，某个Bean的完整创建依赖于其他Bean（或普通参数）的注入</p><h3 id="IoC和DI的关系"><a href="#IoC和DI的关系" class="headerlink" title="IoC和DI的关系"></a>IoC和DI的关系</h3><p>第一种观点：IoC强调的是Bean创建权的反转，而DI强调的是Bean的依赖关系，认为不是一回事<br>第二种观点：IoC强调的是Bean创建权的反转，而DI强调的是通过注入的方式反转Bean的创建权，认为DI是IoC的其中一种实现方式</p><h3 id="AOP面向切面"><a href="#AOP面向切面" class="headerlink" title="AOP面向切面"></a>AOP面向切面</h3><p>问题：通用的事务功能耦合在业务代码中，通用的日志功能耦合在业务代码中<br>aop：将Bean的创建权反转给BeanFactory，而BeanFactory生产的Bean是目标Bean的代理对象，这样就可以在代理对象中对目标对象方法进行相应的增强。<br>面向切面编程，是对面向对象编程OOP的升华。OOP是纵向对一个事物的抽象，一个对象包括静态的属性信息，包括动态的方法信息等。而AOP是横向的对不同事物的抽象，属性与属性、方法与方法、对象与对象都可以组成一个切面，而用这种思维去设计编程的方式叫做面向切面编程</p><h3 id="三种思想总结"><a href="#三种思想总结" class="headerlink" title="三种思想总结"></a>三种思想总结</h3><ol><li>IoC控制反转，是将程序创建Bean的权利反转给第三方；</li><li>DI依赖注入，某个完整Bean需要依赖于其他Bean（或属性）的注入；</li><li>AOP面向切面编程，用横向抽取方法（属性、对象等）思想，组装成一个功能性切面。</li></ol><h2 id="BeanFactory与ApplicationContext的关系"><a href="#BeanFactory与ApplicationContext的关系" class="headerlink" title="BeanFactory与ApplicationContext的关系"></a>BeanFactory与ApplicationContext的关系</h2><ul><li>BeanFactory是Spring的早期接口，称为Spring的Bean工厂，ApplicationContext是后期更高级接口，称之为 Spring 容器； </li><li>ApplicationContext在BeanFactory基础上对功能进行了扩展，例如：监听功能、国际化功能等。BeanFactory的 API更偏向底层，ApplicationContext的API大多数是对这些底层API的封装； </li><li>Bean创建的主要逻辑和功能都被封装在BeanFactory中，ApplicationContext不仅继承了BeanFactory，而且 ApplicationContext内部还维护着BeanFactory的引用，所以，ApplicationContext与BeanFactory既有继承关系，又有融合关系。</li><li>Bean的初始化时机不同，原始BeanFactory是在首次调用getBean时才进行Bean的创建，而ApplicationContext则是配置文件加载，容器一创建就将Bean都实例化并初始化好。</li></ul><h2 id="Bean的实例化配置"><a href="#Bean的实例化配置" class="headerlink" title="Bean的实例化配置"></a>Bean的实例化配置</h2><p>Spring的实例化方式主要如下两种：</p><ul><li>构造方式实例化：底层通过构造方法对Bean进行实例化</li><li>工厂方式实例化：底层通过调用自定义的工厂方法对Bean进行实例化，又分三种<ul><li>静态工厂方法实例化Bean</li><li>实例工厂方法实例化Bean</li><li>实现FactoryBean规范延迟实例化Bean</li></ul></li></ul><h2 id="Bean的依赖注入配置"><a href="#Bean的依赖注入配置" class="headerlink" title="Bean的依赖注入配置"></a>Bean的依赖注入配置</h2><p>Bean的依赖注入有两种方式：</p><h2 id="Bean的依赖注入配置-1"><a href="#Bean的依赖注入配置-1" class="headerlink" title="Bean的依赖注入配置"></a>Bean的依赖注入配置</h2><p>依赖注入的数据类型有如下三种：</p><ul><li>普通数据类型，例如：String、int、boolean等，通过value属性指定。</li><li>引用数据类型，例如：UserDaoImpl、DataSource等，通过ref属性指定。</li><li>集合数据类型，例如：List、Map、Properties等。</li></ul><h2 id="Spring-配置非自定义Bean"><a href="#Spring-配置非自定义Bean" class="headerlink" title="Spring 配置非自定义Bean"></a>Spring 配置非自定义Bean</h2><p>配置非自定义的Bean需要考虑如下两个问题：</p><ul><li>被配置的Bean的实例化方式是什么？无参构造、有参构造、静态工厂方式还是实例工厂方式；</li><li>被配置的Bean是否需要注入必要属性</li></ul><h2 id="Spring的后处理器"><a href="#Spring的后处理器" class="headerlink" title="Spring的后处理器"></a>Spring的后处理器</h2><p>Spring的后处理器是Spring对外开发的重要扩展点，允许我们介入到Bean的整个实例化流程中来，以达到动态注册BeanDefinition，动态修改BeanDefinition，以及动态修改Bean的作用。Spring主要有两种后处理器：</p><ul><li>BeanFactoryPostProcessor：Bean工厂后处理器，在BeanDefinitionMap填充完毕，Bean实例化之前执行；</li><li>BeanPostProcessor：Bean后处理器，一般在Bean实例化之后，填充到单例池singletonObjects之前执行</li></ul><h3 id="Bean工厂后处理器-–-BeanFactoryPostProcessor"><a href="#Bean工厂后处理器-–-BeanFactoryPostProcessor" class="headerlink" title="Bean工厂后处理器 – BeanFactoryPostProcessor"></a>Bean工厂后处理器 – BeanFactoryPostProcessor</h3><p>BeanFactoryPostProcessor是一个接口规范，实现了该接口的类只要交由Spring容器管理的话，那么Spring就会回调该接口的方法，用于对BeanDefinition注册和修改的功能。<br><strong>BeanDefinitionRegistryPostProcessor</strong><br>Spring 提供了一个BeanFactoryPostProcessor的子接口BeanDefinitionRegistryPostProcessor专门用于注册BeanDefinition操作</p><h3 id="Bean后处理器-–-BeanPostProcessor"><a href="#Bean后处理器-–-BeanPostProcessor" class="headerlink" title="Bean后处理器 – BeanPostProcessor"></a>Bean后处理器 – BeanPostProcessor</h3><p>Bean被实例化后，到最终缓存到名为singletonObjects单例池之前，中间会经过Bean的初始化过程，例如：属性的填充、初始方法init的执行等，其中有一个对外进行扩展的点BeanPostProcessor，我们称为Bean后处理。跟上面的Bean工厂后处理器相似，它也是一个接口，实现了该接口并被容器管理的BeanPostProcessor，会在流程节点上被Spring自动调用。</p><h2 id="Spring-Bean的生命周期"><a href="#Spring-Bean的生命周期" class="headerlink" title="Spring Bean的生命周期"></a>Spring Bean的生命周期</h2><p>Spring Bean的生命周期是从 Bean 实例化之后，即通过反射创建出对象之后，到Bean成为一个完整对象，最终存储到单例池中，这个过程被称为Spring Bean的生命周期。Spring Bean的生命周期大体上分为三个阶段：</p><ul><li>Bean的实例化阶段：Spring框架会取出BeanDefinition的信息进行判断当前Bean的范围是否是singleton的，是否不是延迟加载的，是否不是FactoryBean等，最终将一个普通的singleton的Bean通过反射进行实例化；</li><li>Bean的初始化阶段：Bean创建之后还仅仅是个”半成品”，还需要对Bean实例的属性进行填充、执行一些Aware接口方法、执行BeanPostProcessor方法、执行InitializingBean接口的初始化方法、执行自定义初始化init方法等。该阶段是Spring最具技术含量和复杂度的阶段，Aop增强功能，后面要学习的Spring的注解功能等、spring高频面试题Bean的循环引用问题都是在这个阶段体现的；</li><li>Bean的完成阶段：经过初始化阶段，Bean就成为了一个完整的Spring Bean，被存储到单例池singletonObjects中去了，即完成了Spring Bean的整个生命周期</li></ul><h3 id="Bean的初始化阶段"><a href="#Bean的初始化阶段" class="headerlink" title="Bean的初始化阶段"></a>Bean的初始化阶段</h3><p>Spring Bean的初始化过程涉及如下几个过程：</p><ul><li>Bean实例的属性填充</li><li>Aware接口属性注入</li><li>BeanPostProcessor的before()方法回调</li><li>InitializingBean接口的初始化方法回调</li><li>自定义初始化方法init回调</li><li>BeanPostProcessor的after()方法回调</li></ul><h3 id="循环依赖"><a href="#循环依赖" class="headerlink" title="循环依赖"></a>循环依赖</h3><p>多个实体之间相互依赖并形成闭环的情况就叫做”循环依赖”，也叫做”循环引用”<br>示例：</p><p>解决：<br>Spring提供了三级缓存存储 完整Bean实例 和 半成品Bean实例 ，用于解决循环引用问题</p><p>UserService和UserDao循环依赖的过程结合上述三级缓存描述一下</p><ol><li>UserService 实例化对象，但尚未初始化，将UserService存储到三级缓存；</li><li>UserService 属性注入，需要UserDao，从缓存中获取，没有UserDao；</li><li>UserDao实例化对象，但尚未初始化，将UserDao存储到到三级缓存；</li><li>UserDao属性注入，需要UserService，从三级缓存获取UserService，UserService从三级缓存移入二级缓存；</li><li>UserDao执行其他生命周期过程，最终成为一个完成Bean，存储到一级缓存，删除二三级缓存；</li><li>UserService 注入UserDao；</li><li>UserService执行其他生命周期过程，最终成为一个完成Bean，存储到一级缓存，删除二三级缓存。</li></ol><h3 id="Aware接口"><a href="#Aware接口" class="headerlink" title="Aware接口"></a>Aware接口</h3><p>Aware接口是一种框架辅助属性注入的一种思想，其他框架中也可以看到类似的接口。框架具备高度封装性，我们接触到的一般都是业务代码，一个底层功能API不能轻易的获取到，但是这不意味着永远用不到这些对象，如果用到了，就可以使用框架提供的类似Aware的接口，让框架给我们注入该对象。</p><h3 id="IOC整体流程总结"><a href="#IOC整体流程总结" class="headerlink" title="IOC整体流程总结"></a>IOC整体流程总结</h3><h2 id="Bean基本注解开发"><a href="#Bean基本注解开发" class="headerlink" title="Bean基本注解开发"></a>Bean基本注解开发</h2><p>使用@Component 注解替代标签</p><p>import注解<br>@Import可以导入如下三种类：<br>普通的配置类<br>实现ImportSelector接口的类<br>实现ImportBeanDefinitionRegistrar接口的类</p><h3 id="Spring注解的解析原理"><a href="#Spring注解的解析原理" class="headerlink" title="Spring注解的解析原理"></a>Spring注解的解析原理</h3><h2 id="javaweb三大组件"><a href="#javaweb三大组件" class="headerlink" title="javaweb三大组件"></a>javaweb三大组件</h2><p>SpringMVC容器与spring容器<br>Spring容器和SpringMVC容器都是管理Bean对象的地方，Spring容器管理Dao、Service相关的Bean，SpringMVC容器管理跟 DispatcherServlet相关的Bean，比如Controller和ViewResolver。所以我们在SpringMVC的配置文件里配置的扫描路径就是 Controller的路径，而Spring的配置文件里自然配的就是Service和Dao的路径。<br>Spring容器和SpringMVC容器是父子容器的关系。Spring容器是父容器，SpringMVC容器是子容器。在子容器中可以访问父容器中的对象，但是父容器中不能访问子容器中的对象。简单的可以理解为在controller 中可以访问service对象，但是在service中确不能访问controller对象。<br>web容器（比如Tomcat和jetty，当然这两者也是servlet容器，或者说包含了servlet容器；但是Apache仅仅是一个web容器，不包含servlet容器，不能处理servlet请求。 大多数servlet容器同时提供了web容器的功能，也就是说大多servlet容器可以独立运行你的web应用。），Tomcat可以看做是一个”HTTP服务器 + Servlet容器”，比Spring容器的范围更大，它是管理servlet、监听器（listener）、过滤器（Filter）的， 这些并不在Spring和SpringMVC容器的管理范围以内。因此，我们无法在这些类中直接使用Spring注解的方式来注入我们需要的对象，是无效的，web容器是无法识别的<br><a href="https://monkback.github.io/post/spring/spring%E5%AE%B9%E5%99%A8%E4%B8%8Eweb%E5%AE%B9%E5%99%A8/">https://monkback.github.io/post/spring/spring%E5%AE%B9%E5%99%A8%E4%B8%8Eweb%E5%AE%B9%E5%99%A8/</a></p>]]></content>
    
    
    <categories>
      
      <category>技术</category>
      
    </categories>
    
    
  </entry>
  
  
  
  
</search>
